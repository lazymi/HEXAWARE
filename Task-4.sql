USE TICKET_BOOKING_SYSTEM;

-- 1. Calculate the Average Ticket Price for Events in Each Venue Using a Subquery.
SELECT VENUE_ID,VENUE_NAME,(SELECT AVG(TKT_PRICE) FROM EVENT_TB WHERE VENUE_ID=V.VENUE_ID) AS AVG_TKT_PRICE FROM VENU V;

-- 2. Find Events with More Than 50% of Tickets Sold using subquery.
SELECT EVENT_ID, EVENT_NAME,AVAIL_SEATS,TOT_SEATS, (TOT_SEATS-AVAIL_SEATS)  AS SOLD_SEATS FROM EVENT_TB WHERE EVENT_ID IN(SELECT EVENT_ID  FROM EVENT_TB WHERE (TOT_SEATS - AVAIL_SEATS)>(TOT_SEATS/2));
 
-- 3. Calculate the Total Number of Tickets Sold for Each Event.
SELECT EVENT_ID,EVENT_NAME,(SELECT SUM(NUM_TICKETS) FROM BOOKING  B WHERE B.EVENT_ID=E.EVENT_ID)+(TOT_SEATS-AVAIL_SEATS) AS TOT_TKTS_SOLD FROM EVENT_TB E;

-- 4. Find Users Who Have Not Booked Any Tickets Using a NOT EXISTS Subquery.
SELECT CUST_ID,CUST_NAME FROM CUSTOMER C WHERE NOT EXISTS(SELECT CUST_ID FROM BOOKING B WHERE B.CUST_ID=C.CUST_ID);

-- 5. List Events with No Ticket Sales Using a NOT IN Subquery.
SELECT EVENT_ID,EVENT_NAME FROM EVENT_TB WHERE EVENT_ID NOT IN (SELECT EVENT_ID FROM BOOKING);

-- 6. Calculate the Total Number of Tickets Sold for Each Event Type Using a Subquery in the FROM Clause.
SELECT EVENT_TYPE, SUM(TOT_TKTS_SOLD) AS TOT_TKTS_SOLD
FROM (
    SELECT EVENT_TYPE,EVENT_ID,
        (SELECT SUM(NUM_TICKETS) FROM BOOKING
        WHERE BOOKING.EVENT_ID = EVENT_TB.EVENT_ID) -- (+ EVENT_TB.AVAIL_SEATS ) to also consider pre-sold seats
        AS TOT_TKTS_SOLD
    FROM EVENT_TB
) AS SUBQUERY
GROUP BY EVENT_TYPE;

-- 7. Find Events with Ticket Prices Higher Than the Average Ticket Price Using a Subquery in the WHERE Clause.
SELECT EVENT_ID,EVENT_NAME,TKT_PRICE FROM EVENT_TB WHERE TKT_PRICE >(SELECT AVG(TKT_PRICE)FROM EVENT_TB);

-- 8. Calculate the Total Revenue Generated by Events for Each User Using a Correlated Subquery.
SELECT CUST_ID,CUST_NAME,(SELECT SUM(TOT_COST) FROM BOOKING B WHERE B.CUST_ID=C.CUST_ID) AS TOT_REVENUE FROM CUSTOMER C;

-- 9. List Users Who Have Booked Tickets for Events in a Given Venue Using a Subquery in the WHERE Clause.
SELECT CUST_ID,CUST_NAME
FROM CUSTOMER C
WHERE EXISTS (
    SELECT 1
    FROM BOOKING B
    JOIN EVENT_TB E ON B.EVENT_ID = E.EVENT_ID
    WHERE E.VENUE_ID = 1
    AND B.CUST_ID = C.CUST_ID
);

-- 10. Calculate the Total Number of Tickets Sold for Each Event Category Using a Subquery with GROUP BY.
SELECT EVENT_TYPE,SUM(TOT_TKTS_SOLD) AS TOT_TKTS_SOLD FROM (SELECT EVENT_TYPE,EVENT_ID,(SELECT SUM(NUM_TICKETS) FROM BOOKING B WHERE B.EVENT_ID=E.EVENT_ID)AS TOT_TKTS_SOLD FROM EVENT_TB E) AS SUBQUERY GROUP BY EVENT_TYPE;

-- 11. Find Users Who Have Booked Tickets for Events in each Month Using a Subquery with DATE_FORMAT.
SELECT CUST_ID,CUST_NAME FROM CUSTOMER C WHERE EXISTS(SELECT * FROM BOOKING B WHERE B.CUST_ID=C.CUST_ID AND FORMAT(B.BOOKING_DATE,'YYYY-MM-DD'));

-- 12. Calculate the Average Ticket Price for Events in Each Venue Using a Subquery
SELECT VENUE_ID,VENUE_NAME,(SELECT AVG(TKT_PRICE) FROM EVENT_TB E WHERE E.VENUE_ID=V.VENUE_ID) AS AVG_TKTS_PRICE FROM VENU V;